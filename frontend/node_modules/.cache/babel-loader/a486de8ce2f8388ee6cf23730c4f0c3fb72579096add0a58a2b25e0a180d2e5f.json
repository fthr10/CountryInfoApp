{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fatih1\\\\Desktop\\\\CountryInfoApp\\\\frontend\\\\src\\\\components\\\\PopulationChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// ChartJS bileşenlerini kaydediyoruz\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst PopulationChart = ({\n  countryCode\n}) => {\n  _s();\n  const [populationData, setPopulationData] = useState([]);\n  useEffect(() => {\n    // API'den veri çekiyoruz\n    fetch(`https://countriesnow.space/api/v0.1/countries/population/`).then(response => response.json()).then(data => {\n      const countryData = data.data.find(country => country.country === countryCode);\n      if (countryData) {\n        const formattedData = countryData.populationCounts.map(item => ({\n          year: item.year,\n          population: Math.floor(item.value) // Kesirli kısmı tamamen kaldırıyoruz\n        }));\n        setPopulationData(formattedData);\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, [countryCode]);\n\n  // Sayıyı formatlayan fonksiyon\n  const formatNumber = num => {\n    return num.toLocaleString(); // 3'er haneli gruplar için nokta ekler\n  };\n\n  // Verileri chartData'ya yerleştiriyoruz\n  const chartData = {\n    labels: populationData.map(item => item.year),\n    datasets: [{\n      label: 'Population Growth',\n      data: populationData.map(item => item.population),\n      fill: false,\n      borderColor: 'rgba(75,192,192,1)',\n      tension: 0.1\n    }]\n  };\n\n  // Y eksenini dinamik olarak ayarlıyoruz\n  const minPopulation = Math.min(...populationData.map(item => item.population));\n  const maxPopulation = Math.max(...populationData.map(item => item.population));\n\n  // Y ekseninin stepSize hesaplıyoruz\n  const stepSize = Math.ceil((maxPopulation - minPopulation) / 6); // 6 bölüme ayırıyoruz\n\n  // Y ekseninin daha düzgün görünmesi için bir boşluk ekliyoruz\n  const extraMargin = Math.ceil(stepSize / 2);\n\n  // Grafik seçenekleri\n  const options = {\n    scales: {\n      y: {\n        min: minPopulation - extraMargin,\n        max: maxPopulation + extraMargin,\n        ticks: {\n          stepSize: stepSize,\n          callback: function (value) {\n            return formatNumber(value); // Burada sayıları düzgün bir şekilde formatta yazdırıyoruz\n          }\n        }\n      }\n    },\n    responsive: true,\n    plugins: {\n      tooltip: {\n        callbacks: {\n          // Tooltip'teki sayıları düzgün formatlıyoruz\n          label: function (tooltipItem) {\n            return formatNumber(tooltipItem.raw); // Tooltip'teki sayıları da düzgün formatta gösteriyoruz\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Population Growth Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), populationData.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No population data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(PopulationChart, \"NEaG5VU6kFtudDFA6LViIJkCG5k=\");\n_c = PopulationChart;\nexport default PopulationChart;\nvar _c;\n$RefreshReg$(_c, \"PopulationChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","PopulationChart","countryCode","_s","populationData","setPopulationData","fetch","then","response","json","data","countryData","find","country","formattedData","populationCounts","map","item","year","population","Math","floor","value","catch","error","console","formatNumber","num","toLocaleString","chartData","labels","datasets","label","fill","borderColor","tension","minPopulation","min","maxPopulation","max","stepSize","ceil","extraMargin","options","scales","y","ticks","callback","responsive","plugins","tooltip","callbacks","tooltipItem","raw","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/Users/Fatih1/Desktop/CountryInfoApp/frontend/src/components/PopulationChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\n\r\n// ChartJS bileşenlerini kaydediyoruz\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst PopulationChart = ({ countryCode }) => {\r\n  const [populationData, setPopulationData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // API'den veri çekiyoruz\r\n    fetch(`https://countriesnow.space/api/v0.1/countries/population/`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const countryData = data.data.find(\r\n          (country) => country.country === countryCode\r\n        );\r\n\r\n        if (countryData) {\r\n          const formattedData = countryData.populationCounts.map((item) => ({\r\n            year: item.year,\r\n            population: Math.floor(item.value) // Kesirli kısmı tamamen kaldırıyoruz\r\n          }));\r\n          setPopulationData(formattedData);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  }, [countryCode]);\r\n\r\n  // Sayıyı formatlayan fonksiyon\r\n  const formatNumber = (num) => {\r\n    return num.toLocaleString(); // 3'er haneli gruplar için nokta ekler\r\n  };\r\n\r\n  // Verileri chartData'ya yerleştiriyoruz\r\n  const chartData = {\r\n    labels: populationData.map((item) => item.year),\r\n    datasets: [\r\n      {\r\n        label: 'Population Growth',\r\n        data: populationData.map((item) => item.population),\r\n        fill: false,\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        tension: 0.1\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Y eksenini dinamik olarak ayarlıyoruz\r\n  const minPopulation = Math.min(...populationData.map((item) => item.population));\r\n  const maxPopulation = Math.max(...populationData.map((item) => item.population));\r\n\r\n  // Y ekseninin stepSize hesaplıyoruz\r\n  const stepSize = Math.ceil((maxPopulation - minPopulation) / 6); // 6 bölüme ayırıyoruz\r\n\r\n  // Y ekseninin daha düzgün görünmesi için bir boşluk ekliyoruz\r\n  const extraMargin = Math.ceil(stepSize / 2);\r\n\r\n  // Grafik seçenekleri\r\n  const options = {\r\n    scales: {\r\n      y: {\r\n        min: minPopulation - extraMargin,\r\n        max: maxPopulation + extraMargin,\r\n        ticks: {\r\n          stepSize: stepSize,\r\n          callback: function(value) {\r\n            return formatNumber(value); // Burada sayıları düzgün bir şekilde formatta yazdırıyoruz\r\n          }\r\n        }\r\n      }\r\n    },\r\n    responsive: true,\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          // Tooltip'teki sayıları düzgün formatlıyoruz\r\n          label: function(tooltipItem) {\r\n            return formatNumber(tooltipItem.raw); // Tooltip'teki sayıları da düzgün formatta gösteriyoruz\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Population Growth Over Time</h2>\r\n      {populationData.length > 0 ? (\r\n        <Line data={chartData} options={options} />\r\n      ) : (\r\n        <p>No population data available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopulationChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}