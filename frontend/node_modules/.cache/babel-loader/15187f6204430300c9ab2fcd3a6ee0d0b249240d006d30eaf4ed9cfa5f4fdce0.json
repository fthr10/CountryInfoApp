{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fatih1\\\\Desktop\\\\CountryInfoApp\\\\frontend\\\\src\\\\components\\\\PopulationChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst PopulationChart = ({\n  countryCode\n}) => {\n  _s();\n  const [populationData, setPopulationData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(`https://countriesnow.space/api/v0.1/countries/population/`).then(response => response.json()).then(data => {\n      console.log(data); // Veriyi kontrol etmek için konsola yazdırıyoruz\n\n      const countryData = data.data.find(country => country.country === countryCode);\n      if (countryData) {\n        // API'den gelen populationCounts verisini formatlayarak alıyoruz\n        const formattedData = countryData.populationCounts.map(item => ({\n          year: item.year,\n          population: item.value / 1000000 // Milyonlar cinsine çevirme\n        }));\n        setPopulationData(formattedData);\n      }\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n      setLoading(false);\n    });\n  }, [countryCode]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading population data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n  const chartData = {\n    labels: populationData.map(item => item.year),\n    datasets: [{\n      label: 'Population Growth (in millions)',\n      data: populationData.map(item => item.population),\n      fill: false,\n      borderColor: 'rgba(75,192,192,1)',\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Population Growth Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), populationData.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No population data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(PopulationChart, \"P202WIjHUr88BRi4MXX3C8AJBXM=\");\n_c = PopulationChart;\nexport default PopulationChart;\nvar _c;\n$RefreshReg$(_c, \"PopulationChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","PopulationChart","countryCode","_s","populationData","setPopulationData","loading","setLoading","fetch","then","response","json","data","console","log","countryData","find","country","formattedData","populationCounts","map","item","year","population","value","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","chartData","labels","datasets","label","fill","borderColor","tension","length","_c","$RefreshReg$"],"sources":["C:/Users/Fatih1/Desktop/CountryInfoApp/frontend/src/components/PopulationChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst PopulationChart = ({ countryCode }) => {\r\n  const [populationData, setPopulationData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(`https://countriesnow.space/api/v0.1/countries/population/`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data);  // Veriyi kontrol etmek için konsola yazdırıyoruz\r\n\r\n        const countryData = data.data.find(\r\n          (country) => country.country === countryCode\r\n        );\r\n\r\n        if (countryData) {\r\n          // API'den gelen populationCounts verisini formatlayarak alıyoruz\r\n          const formattedData = countryData.populationCounts.map((item) => ({\r\n            year: item.year,\r\n            population: item.value / 1000000 // Milyonlar cinsine çevirme\r\n          }));\r\n          setPopulationData(formattedData);\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n        setLoading(false);\r\n      });\r\n  }, [countryCode]);\r\n\r\n  if (loading) {\r\n    return <p>Loading population data...</p>;\r\n  }\r\n\r\n  const chartData = {\r\n    labels: populationData.map((item) => item.year),\r\n    datasets: [\r\n      {\r\n        label: 'Population Growth (in millions)',\r\n        data: populationData.map((item) => item.population),\r\n        fill: false,\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        tension: 0.1\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Population Growth Over Time</h2>\r\n      {populationData.length > 0 ? (\r\n        <Line data={chartData} />\r\n      ) : (\r\n        <p>No population data available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopulationChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}